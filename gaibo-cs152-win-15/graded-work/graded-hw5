===== string_list.c =====

/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Homework 5 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "string_list.h"


int sl_sorted_asc(string_list* ss) {
    // special case: empty list is sorted in ascending order
    if (ss == NULL) {
        return 1;
    }
    
    // base case: next node is NULL (last node is reached)
    if (ss->next == NULL) {
        return 1;
    }
    
    // recursion
    if (strcmp(ss->val, ss->next->val) <= 0) {
        return sl_sorted_asc(ss->next);
    } else {
        return 0;
    }
}

string_list* cons_create(char* s, string_list* tl) {
    string_list* hd = malloc(sizeof(string_list));
    hd->val = malloc((strlen(s)+1) * sizeof(char));
    hd->val = s; //#grader: string here could be stacked; this should be a 
    hd->next = tl;//	    strcpy. -1 design
    return hd;
}

void cons_link(string_list* hd, string_list* tl) {
    hd->next = tl;
    return;
}

string_list* sl_insert(char* s, string_list* ss) {
    if (ss == NULL || strcmp(s, ss->val) <= 0) {
        // if given empty list or if strcmp indicates before
        return cons_create(s, ss);
    } else {
        // proceed down the list
        cons_link(ss, sl_insert(s, ss->next));
        return ss;
    }
}

string_list* sl_filter(int (*test)(char*), string_list* ss) {
    if (ss == NULL) {
        return NULL;
    } else {
        if ((*test)(ss->val)) {
            cons_link(ss, sl_filter(test, ss->next));
            return ss;
        } else {
            string_list* new_start = ss->next;
            free(ss->val); //#grader: because string could have been stacked
            free(ss);//	   	      memory (see above), fails on certain
            return sl_filter(test, new_start); // inputs.  No further deduction
        }
    }
}
===== string_list.h =====

/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Homework 5 */


/**** Struct Definitions ****/

typedef struct string_list string_list;    
struct string_list {
    char* val;
    string_list* next;
};


/**** Function Declarations ****/

/* string_list* -> int */
/* determine whether a list is in ascending lexicographic order */
/* note: duplicates are allowed */
int sl_sorted_asc(string_list* ss);

/* char* string_list* -> string_list* */
/* insert the string val into the list in its proper sorted position */
/* note: assumes string_list given is sorted in ascending order */
string_list* sl_insert(char* s, string_list* ss);
string_list* cons_create(char* s, string_list* tl);
void cons_link(string_list* hd, string_list* tl);

/* int string_list* -> string_list* */
/* filter the list destructively according to the test function */
string_list* sl_filter(int (*test)(char*), string_list* ss);
===== sl_evidence.c =====

/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Homework 5 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "string_list.h"


void evidence_sl_sorted_asc(void) {
    printf("***testing sl_sorted_asc\n");
    string_list *test1 = malloc(sizeof(string_list));
    string_list *test2 = malloc(sizeof(string_list));
    string_list *test3 = malloc(sizeof(string_list));
    test1->val = "test1";
    test1->next = test2;
    test2->val = "test2";
    test2->next = test3;
    test3->val = "test3";
    test3->next = NULL;
    printf("this should be sorted. expecting 1: %d\n", sl_sorted_asc(test1));
    test1->val = "z";
    test1->next = test2;
    test2->val = "y";
    test2->next = test3;
    test3->val = "x";
    test3->val = NULL;
    printf("this should not be. expecting 0: %d\n", sl_sorted_asc(test1));
    free(test1);
    free(test2);
    free(test3);
    return;
}

void list_printer(string_list* list) {
    if (list == NULL) {
        printf("empty list!\n");
    }
    while (list != NULL) {
        printf("%s\n", list->val);
        list = list->next;
    }
    return;
}

void free_list(string_list* list) {
    if (list == NULL) {
        return;
    }
    if (list->next != NULL) {
        free_list(list->next);
    }
    free(list);
    return;
}

void evidence_sl_insert(void) {
    printf("***testing sl_insert\n");
    string_list* test1 = malloc(sizeof(string_list));
    string_list* test2 = malloc(sizeof(string_list));
    string_list* test3 = malloc(sizeof(string_list));
    test1->val = "test1";
    test1->next = test2;
    test2->val = "test2";
    test2->next = test3;
    test3->val = "test3";
    test3->next = NULL;
    list_printer(sl_insert("test4", test1));
    free_list(test1);
    string_list* testx = malloc(sizeof(string_list));
    string_list* testy = malloc(sizeof(string_list));
    string_list* testz = malloc(sizeof(string_list));
    testx->val = "x";
    testx->next = testy;
    testy->val = "y";
    testy->next = testz;
    testz->val = "z";
    testz->next = NULL;
    string_list* new_head = sl_insert("w", testx);
    list_printer(new_head);
    free_list(new_head);
    return;
}

int is_test1(char* s) {
    if (strcmp(s, "test1") == 0) {
        return 1;
    } else {
        return 0;
    }
}

void evidence_sl_filter(void) {
    printf("***testing sl_filter\n");
    string_list* test1 = malloc(sizeof(string_list));
    string_list* test2 = malloc(sizeof(string_list));
    string_list* test3 = malloc(sizeof(string_list));
    test1->val = malloc(6*sizeof(char));
    test2->val = malloc(6*sizeof(char));
    test3->val = malloc(6*sizeof(char));
    strcpy(test1->val, "test1");
    test1->next = test2;
    strcpy(test2->val, "test2");
    test2->next = test3;
    strcpy(test3->val, "test3");
    test3->next = NULL;
    printf("should print test1:\n");
    list_printer(sl_filter(&is_test1, test1));
    free_list(test1);
    string_list* testx = malloc(sizeof(string_list));
    string_list* testy = malloc(sizeof(string_list));
    string_list* testz = malloc(sizeof(string_list));
    testx->val = malloc(2*sizeof(char));
    testy->val = malloc(2*sizeof(char));
    testz->val = malloc(2*sizeof(char));
    strcpy(testx->val, "x");
    testx->next = testy;
    strcpy(testy->val, "y");
    testy->next = testz;
    strcpy(testz->val, "z");
    testz->next = NULL;
    string_list* temp = sl_filter(&is_test1, testx);
    printf("should print empty list:\n");
    list_printer(temp);
    free_list(temp);
    return;
}

int main() {
    evidence_sl_sorted_asc();
    evidence_sl_insert();
    evidence_sl_filter();
    return 0;
}
===== Makefile =====

all: sl_evidence huff_evidence huffman

sl_evidence: string_list.c sl_evidence.c
	gcc -Wall -g -o sl_evidence string_list.c sl_evidence.c

huff_evidence: huff.c huff_evidence.c
	gcc -Wall -g -o huff_evidence huff.c huff_evidence.c

huffman: huff.c huffman.c
	gcc -Wall -g -o huffman huff.c huffman.c

clean:
	rm -f sl_evidence huff_evidence huffman *.stackdump *~
//#grader: I'd advise _against_ cleaning up your backup files (*~).


===== huffman.c =====
/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Homework 5 */

#include <stdio.h>
#include <stdlib.h>
#include "huff.h"


int main(int argc, char* argv[]) {
    char* input_str = argv[1];
    int* occ = occurrences(input_str);
    huff_list* one_tree_list = \
        algorithm(insertion_sort(huff_list_builder(occ)));
    huff* final_huff = one_tree_list->huff;
    
    printf("%u\n", huff_height(final_huff));
    key_printer(final_huff);
    string_convert_and_print(input_str, final_huff);
    
    free(final_huff);
    free(one_tree_list);
    free(occ);
    return 0;
}===== huff.c =====
/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Homework 5 */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "huff.h"


/* Construct a singleton Huffman tree from a character and a count. */
huff* huff_singleton(char c, int n) {
    huff* huff_out = malloc(sizeof(huff));
    huff_out->h.leaf.c = c;
    huff_out->h.leaf.n = n;
    return huff_out;
}

/* Return the weight of a Huffman tree. */
int huff_weight(huff* h) {
    switch (h->tag) {
        case LEAF:
            return h->h.leaf.n;
            break;
        case NODE:
            return h->h.node.n;
            break;
        default:
            fprintf(stderr, "error: tag not recognized in huff_weight\n");
            exit(1);
            break;
    }
}

/* Merge two Huffman trees. */
/* See step 2 of the algorithm on the web page for details. */
huff* huff_merge(huff* h1, huff* h2) {
    huff* h_out = malloc(sizeof(huff));
    h_out->tag = NODE;
    h_out->h.node.lsub = h1;
    h_out->h.node.rsub = h2;
    h_out->h.node.n = huff_weight(h1) + huff_weight(h2);
    return h_out;
}

/* Display a Huffman tree at the console. */
/* Essential for development and debugging. */
void huff_show(huff* h) {
    huff_show_helper(h, 0);
    return;
}
void huff_show_helper(huff* h, int tabs) {
    switch (h->tag) {
        case LEAF:
            printf("LEAF: %c %d\n", h->h.leaf.c, h->h.leaf.n);
            break;
        case NODE:
            printf("NODE: %d\n", h->h.node.n);
            int i;
            for (i = 0; i <= tabs; i++) {
                printf("\t");
            }
            huff_show_helper(h->h.node.lsub, tabs+1);
            for (i = 0; i <= tabs; i++) {
                printf("\t");
            }
            huff_show_helper(h->h.node.rsub, tabs+1);
            break;
        default:
            fprintf(stderr, "error: tag not recognized in huff_show\n");
            exit(1);
            break;
    }
    return;
}

/* count the occurrence of each letter by produce an int array
 * of counts for each of the 26 letters and the space character */
int* occurrences(char* str) {
    // allocate int array corresponding to the letters of the alphabet
    int* occ_out = malloc(27 * sizeof(int));
    // initialize with zeroes
    int i_init;
    for (i_init = 0; i_init < 27; i_init++) {
        occ_out[i_init] = 0;
    }
    
    int i;
    char temp_c;
    for (i = 0; str[i] != '\0'; i++) {
        temp_c = str[i];
        if (temp_c == ' ') {
            // count spaces in the 27th slot
            occ_out[26]++;
        } else if (isalpha((int) temp_c)) {
            // count letters
            occ_out[toupper((int) temp_c) - 'A']++;   // ASCII math
        }
    }
    
    return occ_out;
}

/* using the very contrived occurrences int array, produce an unsorted
 * huff_list */
huff_list* huff_list_builder(int* occ_array) {
    char c;
    int n;
    huff_list* prev = NULL;
    
    int i;
    for (i = 0; i < 27; i++) {
        if (occ_array[i] != 0) {
            // allocate a new list node to be linked
            huff_list* list_node = malloc(sizeof(huff_list));
            if (i == 26) {
                // construct a space huff tree and link to list
                c = ' ';
                n = occ_array[i];
                list_node->huff = huff_singleton(c, n);
                list_node->next = prev;
                prev = list_node;
            } else {
                // construct a letter huff tree and link to list
                c = (char) (i+'A');
                n = occ_array[i];
                list_node->huff = huff_singleton(c, n);
                list_node->next = prev;
                prev = list_node;
            }
        }
    }
    
    return prev;
}

/* apply insertion sort to the huff_list */
huff_list* insertion_sort(huff_list* unsorted) {
    return insertion_acc(unsorted, NULL);
}
huff_list* cons(huff_list* hd, huff_list* tl) {
    hd->next = tl;
    return hd;
}
huff_list* hl_insert(huff_list* list_node, huff_list* list) {
    if (list == NULL) {
        list_node->next = NULL;
        return list_node;
    } else if (huff_weight(list_node->huff) <= huff_weight(list->huff)) {
        return cons(list_node, list);
    } else {
        return cons(list, hl_insert(list_node, list->next));
    }
}
huff_list* insertion_acc(huff_list* unsorted, huff_list* sorted) {
    if (unsorted == NULL) {
        return sorted;
    } else {
        huff_list* next_to_sort = unsorted->next;
        return insertion_acc(next_to_sort, hl_insert(unsorted, sorted));
    }
}

/* run the algorithm for coalescing the huff_list */
huff_list* algorithm(huff_list* sorted) {
    // stopping case
    if (sorted->next == NULL) {
        return sorted;
    }
    
    // construct the new node and replace the first two nodes with it
    huff_list* new_node = malloc(sizeof(huff_list));
    new_node->huff = huff_merge(sorted->huff, sorted->next->huff);
    new_node->next = sorted->next->next;
    free(sorted->next);
    free(sorted);
    
    // recurse until there is only one node left
    return algorithm(insertion_sort(new_node));
}

/* find the number of letters that were encoded by finding the 
 * height of the huff_tree */
unsigned int huff_height(huff* huff) {
    switch (huff->tag) {
        case LEAF:
            return 1;
        case NODE:
            return 1 + my_max(huff_height(huff->h.node.lsub), \
                              huff_height(huff->h.node.rsub));
        default:
            fprintf(stderr, "error: tag not recognized in huff_height\n");
            exit(1);
    }
} //#grader: should be size of leafs; not height.  E.g. "APPLE" has height 3
  //	     but number of leafs=4. -1 construction process
unsigned int my_max(unsigned int a, unsigned int b) {
    return (a > b) ? a : b;
}

/* print the huffman codes with this janky printer */
void key_printer(huff* huff) {
    unsigned int height = huff_height(huff);
    // given the height of the tree, there will be at most height-1 digits
    // in the binary string accumulator plus an extra null ending
    char* bin_str_acc = malloc(height * sizeof(char));
    key_printer_helper(huff, bin_str_acc, 0);
    free(bin_str_acc);
    return;
}
void key_printer_helper(huff* huff, char* bin_str_acc, \
                           unsigned int end_place) {
    switch (huff->tag) {
        case LEAF:
            // end it and print it
            bin_str_acc[end_place] = '\0';
            printf("%c = %s\n", huff->h.leaf.c, bin_str_acc);
            return;
        case NODE:
            // append the desired binary digit and recurse
            bin_str_acc[end_place] = '0';
            key_printer_helper(huff->h.node.lsub, bin_str_acc, end_place+1);
            bin_str_acc[end_place] = '1';
            key_printer_helper(huff->h.node.rsub, bin_str_acc, end_place+1);
            return;
        default:
            fprintf(stderr, "error: tag not recognized in huff_height\n");
            exit(1);
    }
}

/* given a letter and the huff tree, return the binary string code */
char* code_generator(char letter, huff* huff) {
    unsigned int height = huff_height(huff);
    // given the height of the tree, there will be at most height-1 digits
    // in the binary string accumulator plus an extra null ending
    char* bin_str_acc = malloc(height * sizeof(char));
    code_generator_helper(letter, huff, bin_str_acc);
    return bin_str_acc;
}
void code_generator_helper(char letter, huff* huff, char* bin_str_acc) {
    if (huff->tag == NODE) {
        if (huff->h.node.lsub->tag == LEAF) {
            if (huff->h.node.lsub->h.leaf.c == toupper((int) letter)) {
                *bin_str_acc = '0';
                *(bin_str_acc+1) = '\0';
                return;
            }
        } else if (huff->h.node.lsub->tag == NODE) {
            *bin_str_acc = '0';
            code_generator_helper(letter, huff->h.node.lsub, bin_str_acc+1);
        }
        
        if (huff->h.node.rsub->tag == LEAF) {
            if (huff->h.node.rsub->h.leaf.c == toupper((int) letter)) {
                *bin_str_acc = '1';
                *(bin_str_acc+1) = '\0';
                return;
            }
        } else if (huff->h.node.rsub->tag == NODE) {
            *bin_str_acc = '1';
            code_generator_helper(letter, huff->h.node.rsub, bin_str_acc+1);
        }
    } else {
        fprintf(stderr, "error: huff tree starts with a LEAF\n");
        exit(1);
    }
} //#grader: erroneous; see evaluation below. -4 encoding of string

/* print a full converted string */
void string_convert_and_print(char* input_str, huff* huff) {
    int i;
    for (i = 0; input_str[i] != '\0'; i++) {
        char* code = code_generator(input_str[i], huff);
        printf("%s", code);
        free(code);
    }
    printf("\n");
    return;
}/*
 * ======================
 * === GRADER'S TESTS ===
 * ======================
 */


#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "string_list.h"

_Bool g_sl_compare(string_list *sl1, string_list *sl2)
{
  for(;sl1&&sl2;sl1=sl1->next,sl2=sl2->next) {
    if(strcmp(sl1->val,sl2->val))
       return 0;
  }
  if((sl1&&(!sl2)) || ((!sl1)&&sl2))
    return 0;
  return 1;
}

void g_sl_print(string_list *sl)
{
  printf("[ ");
  for(;sl;sl=sl->next)
    printf("\"%s\" ",sl->val);
  printf("]\n");
  return;
}

void g_sl_free(string_list *sl)
{
  string_list *tmp;
  while(sl) {
    tmp = sl->next;
    free(sl);
    sl = tmp;
  }
}
      
int g_hello(char *str)
{
  if(!strcmp(str,"hello"))
    return 1;
  return 0;
}

int g_starts_with_a(char *str)
{
  if(str[0] == 'a')
    return 1;
  return 0;
}

void g_sl_sorted_asc_tests()
{
  printf("=== Testing sl_sorted_asc ===\n");
  string_list *sl0 = NULL;
  string_list sl3 = {"aca",NULL};
  string_list sl2 = {"aba",&sl3};
  string_list sl1 = {"aaa",&sl2};
  string_list sl4 = {"rrr",&sl1};
  string_list sl7 = {"bbb",NULL};
  string_list sl6 = {"ddd",&sl7};
  string_list sl5 = {"aaa",&sl6};
  printf("Trivially-sorted (NULL)\n");
  printf("--> %s\n",sl_sorted_asc(sl0)?"yes":"no");
  printf("Trivially-sorted ");
  g_sl_print(&sl3);
  printf("--> %s\n",sl_sorted_asc(&sl3)?"yes":"no");
  printf("Sorted ");
  g_sl_print(&sl1);
  printf("--> %s\n",sl_sorted_asc(&sl1)?"yes":"no");
  printf("Unsorted ");
  g_sl_print(&sl4);
  printf("--> %s\n",sl_sorted_asc(&sl4)?"no":"yes");
  printf("Unsorted ");
  g_sl_print(&sl5);
  printf("--> %s\n",sl_sorted_asc(&sl5)?"no":"yes");
  return;
}

void g_sl_insert_tests()
{
  printf("=== Testing sl_insert ===\n");
  string_list sl4 = {"acb",NULL};
  string_list sl3 = {"aca",&sl4};
  string_list sl2 = {"aba",&sl3};
  string_list sl1 = {"aaa",&sl2};
  string_list *tmp;
  printf("Singleton ");
  g_sl_print(&sl4);
  tmp = sl_insert("acb",NULL);
  g_sl_print(tmp);
  printf("--> %s\n",g_sl_compare(tmp,&sl4)?"yes":"no");
  printf("Multi-element ");
  g_sl_print(&sl1);
  tmp = sl_insert("aaa",tmp);
  tmp = sl_insert("aca",tmp);
  tmp = sl_insert("aba",tmp);
  g_sl_print(tmp);
  printf("--> %s\n",g_sl_compare(tmp,&sl1)?"yes":"no");
  g_sl_free(tmp);
  return;
}

void g_sl_filter_tests()
{
  printf("=== Testing sl_filter ===\n");
  string_list *tmp1;
  string_list *tmp2;
  
  tmp1 = sl_insert("nope",NULL);
  tmp1 = sl_insert("hello",tmp1);
  tmp1 = sl_insert("sandwich",tmp1);
  tmp1 = sl_insert("hello",tmp1);
  tmp1 = sl_insert("Stapler",tmp1);
  tmp1 = sl_insert("aardvark",tmp1);

  string_list rl2 = {"hello",NULL};
  string_list rl1 = {"hello",&rl2};

  tmp2 = sl_insert("Methylene Chloride",NULL);
  tmp2 = sl_insert("alimony",tmp2);
  tmp2 = sl_insert("tri-n-butyl tin hydride",tmp2);
  tmp2 = sl_insert("aardvark",tmp2);
  tmp2 = sl_insert("Yardenone",tmp2);
  tmp2 = sl_insert("sesquiterpene",tmp2);  

  string_list r2 = {"alimony", NULL};
  string_list r1 = {"aardvark",&r2};

  printf("Large Test 1\n");
  g_sl_print(&rl1);
  tmp1 = sl_filter(&g_hello,tmp1);
  g_sl_print(tmp1);
  printf("--> %s\n",g_sl_compare(tmp1,&rl1)?"yes":"no");
  printf("Large Test 2\n");
  g_sl_print(&r1);
  tmp2 = sl_filter(&g_starts_with_a,tmp2);
  g_sl_print(tmp2);
  printf("--> %s\n",g_sl_compare(tmp2,&r1)?"yes":"no");
  g_sl_free(tmp1);
  g_sl_free(tmp2);
  return;
}
  
int main()
{
  g_sl_sorted_asc_tests();
  g_sl_insert_tests();
  g_sl_filter_tests();
  return 0;
}


/* ====== evaluation ====== */
grader's tests on sl_filter fail with core dump; see in-code comments
huffman returns bizarre results; e.g.

$ ./huffman.exe apple
3
A = 00
E = 01
L = 10
P = 11
1011111011

Incorrect number of table lines indicated; encoded string is nonsense "LPPLP"

/* === correctness === */

/* problem 1 (sl_sorted_asc)            4/ 4 */
/* problem 1 (sl_insert)                4/ 4 */
/* problem 1 (sl_filter)                4/ 4 */

/* problem 2 (frequency analysis)       3/ 3 */
/* problem 2 (make singletons)          2/ 2 */
/* problem 2 (weight calculation)       3/ 3 */
/* problem 2 (merge function)           3/ 3 */
/* problem 2 (construction process)     7/ 8 */ 
/* problem 2 (encoding of string)       4/ 8 */
/* problem 2 (freeing of structures)    3/ 3 */

/* === style === */

/* code layout                          6/ 6 */
/* identifiers are well named           6/ 6 */
/* well-written purposes                4/ 4 */
/* prototypes with appropriate types    4/ 4 */

/* functions are well designed          6/ 6 */
/* code is well factored                6/ 6 */

/* code is written clearly              8/ 8 */
/* code is efficient                    6/ 6 */

/* adequate tests                       8/ 8 */
/* svn used correctly                   4/ 4 */

/* _total-score_                       95/100 */

//#grader: great job!

/* graded by Mark Maskeri */
