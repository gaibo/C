/* graded lab5 */

/* ====== Makefile ====== */
# Makefile for CS152 lab5 Winter 2015

.PHONY : clean

htbl: sll.h sll.c htbl.h htbl.c main.c
	gcc -g -Wall -o htbl sll.c htbl.c main.c -lm

clean:
	rm -rf htbl *.dSYM


/* ====== sll.c ====== */
/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Lab 5 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "sll.h"


sll* sll_cons(char* s, sll* ss) {
    sll* head_new = malloc(sizeof(sll));
    head_new->s = strdup(s);
    head_new->next = ss;
    return head_new;
}

unsigned int sll_length(sll* ss) {
    unsigned int acc = 0;
    while (ss != NULL) {
        acc++;
        ss = ss->next;
    }
    return acc;
}

int sll_member(char* s, sll* ss) {
    while (ss != NULL) {
        if (strcmp(ss->s, s) == 0) {
            return 1;
        }
        ss = ss->next;
    }
    return 0;
}

void sll_show(sll* ss) {
    while (ss != NULL) {
        printf("%s ", ss->s);
        ss = ss->next;
    }
    return;
}

void sll_free(sll* ss) {
    // case of empty list, don't need to free links
    if (ss == NULL) {
        return;
    }
    
    // follow the links to the end, then start freeing
    if (ss->next != NULL) {
        sll_free(ss->next);
    }
    free(ss);
    
    return;
}

/* ====== htbl.c ====== */
/* Gaibo Zhang, gaibo */
/* CS152, Winter 2015 */
/* Lab 5 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "htbl.h"


unsigned long int good_hash(char* s) {
    unsigned long int res = 17;
    int i;
    for (i = 0; s[i] != '\0'; i++) {
        res = 37*res + s[i];
    }
    return res;
}

unsigned long int bad_hash(char* s) {
    unsigned long int res = 0;
    int i;
    for (i = 0; s[i] != '\0'; i++) {
        res += s[i];
    }
    return res;
}

htbl* ht_new(unsigned long int (*h)(char*), unsigned int sz) {
    htbl* htbl_out = malloc(sizeof(htbl));
    htbl_out->buckets = malloc(sz * sizeof(sll*));
    unsigned int i;
    for (i = 0; i < sz; i++) {
        htbl_out->buckets[i] = NULL;
    }
    htbl_out->hash = h;
    htbl_out->n_buckets = sz;
    return htbl_out;
}

unsigned int ht_n_entries(htbl* t) {
    unsigned int acc = 0;
    
    unsigned int i;
    for (i = 0; i < t->n_buckets; i++) {
        acc += sll_length(t->buckets[i]);
    }
    
    return acc;
}

double ht_load_factor(htbl* t) {
    return (double) ht_n_entries(t) / t->n_buckets;
}

unsigned int ht_max_bucket(htbl* t) {
    unsigned int curr_max = 0;   // initialize max
    
    unsigned int temp_list_length;
    unsigned int i;
    for (i = 0; i < t->n_buckets; i++) {
        temp_list_length = sll_length(t->buckets[i]);
        if (temp_list_length > curr_max) {
            curr_max = temp_list_length;
        }
    }
    
    return curr_max;
}

unsigned int ht_ins(char* s, htbl* t) {
    unsigned int chosen_bucket = (*(t->hash))(s) % t->n_buckets;
    t->buckets[chosen_bucket] = sll_cons(s, t->buckets[chosen_bucket]);
    return sll_length(t->buckets[chosen_bucket]);
}

void ht_ins_list(sll* ss, htbl* t) {
    while (ss != NULL) {
        ht_ins(ss->s, t);
        ss = ss->next;
    }
    return;
}

int ht_member(char* s, htbl* t) {
    unsigned int chosen_bucket = (*(t->hash))(s) % t->n_buckets;
    return sll_member(s, t->buckets[chosen_bucket]);
}

void ht_show(htbl* t) {
    unsigned int i;
    for (i = 0; i < t->n_buckets; i++) {
        printf("%u: ", i);
        sll_show(t->buckets[i]);
        printf("\n");
    }
    return;
}

void ht_free(htbl* t) {
    unsigned int i;
    for (i = 0; i < t->n_buckets; i++) {
        sll_free(t->buckets[i]);
    }
    free(t->buckets);
    free(t);
    return;
}

/* ====== evaluation ====== */

/* --- sll --- */
/* - sll_cons          4 / 4 */
/* - sll_length        4 / 4 */
/* - sll_member        4 / 4 */
/* - sll_show          4 / 4 */
/* - sll_free          4 / 4 */

/* --- htbl --- */
/* - good_hash         4 / 4 */
/* - ht_new            3 / 4 */ #grader you need to check the return value of malloc
/* - ht_n_entries      4 / 4 */

/* - ht_load_factor    4 / 4 */
/* - ht_max_bucket     4 / 4 */
/* - ht_ins            4 / 4 */

/* - ht_member         4 / 4 */
/* - ht_show           4 / 4 */
/* - ht_free           4 / 4 */

/* === style === */

/* code layout                        7 / 7 */
/* identifiers are well named         7 / 7 */

/* functions are well designed        7 / 7 */
/* code is well factored              7 / 7 */

/* code is written clearly            7 / 7 */
/* code is efficient                  7 / 7 */

/* svn used correctly                 2 / 2 */

/* _total-score_                     99 /100 */

/* graded by Zhixuan */
